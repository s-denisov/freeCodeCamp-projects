{"version":3,"sources":["store.ts","Editor.tsx","Preview.tsx","Container.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","markdown","SET_MARKDOWN","store","createStore","state","arguments","length","undefined","action","type","connect","x","setMarkdown","props","react_default","a","createElement","id","className","onChange","e","target","value","marked","setOptions","breaks","dangerouslySetInnerHTML","__html","Container","src_Editor","src_Preview","App","es","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAWMA,EAAsB,CAC1BC,SAAQ,yRAkBJC,EAAe,eAuBd,IAAMC,EAAQC,YAXd,WAA8D,IAA7CC,EAA6CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArCN,EAAcS,EAAuBH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnE,OAAQC,EAAOC,MACb,KAAKR,EACH,MAAO,CACLD,SAAUQ,EAAOR,UAErB,QACE,OAAOI,KCjCEM,oBAAQ,SAAAC,GAAC,OAAIA,GAAG,CAACC,YDqBL,SAACD,GAAD,MAAgB,CACzCF,KAAMR,EACND,SAAUW,KCvBGD,CAXmB,SAACG,GACjC,OACEC,EAAAC,EAAAC,cAAA,YACEC,GAAG,SACHC,UAAU,WACVC,SAAU,SAAAC,GAAC,OAAIP,EAAMD,YAAYQ,EAAEC,OAAOC,QAC1CA,MAAOT,EAAMb,+BCKnBuB,IAAOC,WAAW,CAACC,QAAQ,IAEZf,kBAAQ,SAAAC,GAAC,OAAIA,GAAG,KAAhBD,CAZkB,SAACG,GAChC,OACEC,EAAAC,EAAAC,cAAA,OACCC,GAAG,UACFC,UAAU,wBACVQ,wBAAyB,CAACC,OAAQJ,IAAOV,EAAMb,eCNtC4B,EAAA,WACb,OACEd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oCACbJ,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,SCGOC,EARO,WACpB,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAU9B,MAAOA,GACfY,EAAAC,EAAAC,cAACY,EAAD,QCIcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.01e159fd.chunk.js","sourcesContent":["import { createStore } from \"redux\";\nimport { updateExpression } from \"@babel/types\";\n\nexport type State = {\n  readonly markdown: string;\n};\n\nexport type Updater = {\n  readonly setMarkdown: (markdown: string) => void;\n} & State;\n\nconst initialState: State = {\n  markdown: \n`# Header\n## Sub header\n[link](https://www.google.com)\n\\`code\\`\n\\`\\`\\`\nfunction CodeBlock() {\n  return this;\n}\n\\`\\`\\`\n+ List item\n\n**Bold text**\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n> Block quote\n`,\n};\n\nconst SET_MARKDOWN = \"SET_MARKDOWN\"; \ntype ActionType = typeof SET_MARKDOWN;\ntype Action = {\n  type: typeof SET_MARKDOWN;\n  markdown: string;\n};\n\nexport const setMarkdown = (x: string) => ({\n  type: SET_MARKDOWN,\n  markdown: x\n});\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n    case SET_MARKDOWN:\n      return {\n        markdown: action.markdown\n      };\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer);","import React from \"react\";\nimport { setMarkdown, Updater } from \"./store\";\nimport { connect } from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst Editor: React.FC<Updater> = (props) => {\n  return (\n    <textarea \n      id=\"editor\"\n      className=\"col-md-6\"\n      onChange={e => props.setMarkdown(e.target.value)}\n      value={props.markdown}\n    />\n  );\n};\n\nexport default connect(x => x, {setMarkdown})(Editor);","import React from \"react\";\nimport { State } from \"./store\";\nimport { connect } from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport marked from \"marked\";\n\nconst Preview: React.FC<State> = (props) => {\n  return (\n    <div  \n     id=\"preview\"\n      className=\"col-md-6 border h-100\"\n      dangerouslySetInnerHTML={{__html: marked(props.markdown)}}\n    />\n  );\n};\n\nmarked.setOptions({breaks: true});\n\nexport default connect(x => x, null)(Preview);","import React from \"react\";\nimport Editor from \"./Editor\";\nimport Preview from \"./Preview\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default () => {\n  return (\n    <div className=\"container h-100\">\n      <div className=\"row h-100 justify-content-around\">\n        <Editor />\n        <Preview />\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport Container from './Container';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Container />\n    </Provider>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}