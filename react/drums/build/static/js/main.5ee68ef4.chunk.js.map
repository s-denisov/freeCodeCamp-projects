{"version":3,"sources":["store.ts","Pad.tsx","Description.tsx","Machine.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SET_DESCRIPTION","initialState","description","store","createStore","state","arguments","length","undefined","action","type","Pad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","Mousetrap","name","toLowerCase","setDescription","document","getElementById","play","react_default","a","createElement","id","className","onClick","src","concat","React","Component","connect","replace","letters","Machine","pads","map","x","src_Pad","key","style","display","gridTemplateColumns","gridTemplateRows","src_Description","App","es","src_Machine","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAcMA,EAAkB,kBAMlBC,EAAsB,CAC1BC,YAAa,eAiBR,IAAMC,EAAQC,YATrB,WAA+D,IAA9CC,EAA8CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtCL,EAAcQ,EAAwBH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7D,OAAQC,EAAOC,MACb,KAAKV,EACH,MAAO,CAAEE,YAAaO,EAAOP,aAC/B,QACE,OAAOG,YC7BPM,cACJ,SAAAA,EAAYC,GAAiB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAC3BE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFQA,mFAK3BU,IAAUF,KAAKL,KAAKJ,MAAMY,KAAKC,cAAeT,KAAKI,mDAGnDJ,KAAKJ,MAAMc,eAAeV,KAAKJ,MAAMV,aACvByB,SAASC,eAAeZ,KAAKJ,MAAMY,MAC3CK,wCAGN,OACEC,EAAAC,EAAAC,cAAA,UACEC,GAAIjB,KAAKJ,MAAMV,YACfgC,UAAU,WACVC,QAASnB,KAAKI,aAEbJ,KAAKJ,MAAMY,KACZM,EAAAC,EAAAC,cAAA,SACEC,GAAIjB,KAAKJ,MAAMY,KACfU,UAAU,OACVE,IAAG,aAAAC,OAAerB,KAAKJ,MAAMV,YAA1B,kBAxBKoC,IAAMC,WA+BTC,cAAQ,KAAM,CAACd,eDZA,SAACxB,GAAD,MAA0B,CACtDQ,KAAMV,EACNE,iBCUasC,CAAgC7B,GCxBhC6B,cAAQ,SAACnC,GAAD,OAAkBA,GAAO,KAAjCmC,CARsB,SAAC5B,GACpC,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACLrB,EAAMV,YAAYuC,QAAQ,KAAM,QCFjCC,EAA0B,CAC9B,CAAElB,KAAM,IAAKtB,YAAa,YAC1B,CAAEsB,KAAM,IAAKtB,YAAa,YAC1B,CAAEsB,KAAM,IAAKtB,YAAa,YAC1B,CAAEsB,KAAM,IAAKtB,YAAa,YAC1B,CAAEsB,KAAM,IAAKtB,YAAa,QAC1B,CAAEsB,KAAM,IAAKtB,YAAa,WAC1B,CAAEsB,KAAM,IAAKtB,YAAa,cAC1B,CAAEsB,KAAM,IAAKtB,YAAa,QAC1B,CAAEsB,KAAM,IAAKtB,YAAa,cAsBbyC,EAnBW,WACxB,IAAMC,EAAOF,EAAQG,IAAI,SAAAC,GACvB,OACEhB,EAAAC,EAAAC,cAACe,EAAD,CAAKC,IAAKF,EAAEtB,KAAMA,KAAMsB,EAAEtB,KAAMtB,YAAa4C,EAAE5C,gBAQnD,OACE4B,EAAAC,EAAAC,cAAA,OAAKiB,MANW,CAChBC,QAAS,OACTC,oBAAqB,mBACrBC,iBAAkB,oBAGKnB,GAAG,gBACvBW,EACDd,EAAAC,EAAAC,cAACqB,EAAD,QCjBSC,EARO,WACpB,OACExB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAUpD,MAAOA,GACf2B,EAAAC,EAAAC,cAACwB,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASrC,SAASC,eAAe,SDmI3C,kBAAmBqC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5ee68ef4.chunk.js","sourcesContent":["import { createStore } from \"redux\";\n\nexport type State = {\n  readonly description: string;\n};\n\nexport type PadInfoProps = {\n  readonly name: string,\n} & State;\n\nexport type PadProps = {\n  readonly setDescription: (description: string) => void\n} & PadInfoProps;\n\nconst SET_DESCRIPTION = \"SET_DESCRIPTION\";\n\ntype Action = {\n  readonly type: typeof SET_DESCRIPTION,\n} & State;\n\nconst initialState: State = {\n  description: \"Description\"\n};\n\nexport const setDescription = (description: string) => ({\n  type: SET_DESCRIPTION,\n  description\n});\n\nfunction reducer(state = initialState, action: Action) : State {\n  switch (action.type) {\n    case SET_DESCRIPTION:\n      return { description: action.description };\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport Mousetrap from 'mousetrap';\nimport { PadProps, setDescription } from './store';\nimport { connect } from 'react-redux';\n\nclass Pad extends React.Component<PadProps> {\n  constructor(props: PadProps) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentDidMount() {\n    Mousetrap.bind(this.props.name.toLowerCase(), this.handleClick);\n  }\n  handleClick() {\n    this.props.setDescription(this.props.description);\n    const sound = document.getElementById(this.props.name) as HTMLMediaElement;\n    sound.play();\n  }\n  render() {\n    return (\n      <button \n        id={this.props.description}\n        className=\"drum-pad\"\n        onClick={this.handleClick}\n      >\n        {this.props.name}\n        <audio \n          id={this.props.name}\n          className=\"clip\"\n          src={`../sounds/${this.props.description}.mp3`}\n        />\n      </button>\n    );\n  }\n}\n\nexport default connect(null, {setDescription})(Pad);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { State } from './store';\n\nconst Description: React.FC<State> = (props) => {\n  return (\n    <div id=\"display\">\n      {props.description.replace(/_/g, \" \")}\n    </div>\n  );\n};\n\nexport default connect((state: State) => state, null)(Description);","import Pad from './Pad';\nimport React from 'react';\nimport { PadInfoProps } from './store';\nimport Description from './Description';\n\nconst letters: PadInfoProps[] = [\n  { name: \"Q\", description: \"Heater_1\"},\n  { name: \"W\", description: \"Heater_2\"},\n  { name: \"E\", description: \"Heater_3\"},\n  { name: \"A\", description: \"Heater_4\"},\n  { name: \"S\", description: \"Clap\"},\n  { name: \"D\", description: \"Open_HH\"},\n  { name: \"Z\", description: \"Kick_n_Hat\"},\n  { name: \"X\", description: \"Kick\"},\n  { name: \"C\", description: \"Closed_HH\"}\n];\n\nconst Machine: React.FC = () => {\n  const pads = letters.map(x => {\n    return (\n      <Pad key={x.name} name={x.name} description={x.description} />\n    );\n  });\n  const gridStyle = {\n    display: \"grid\", \n    gridTemplateColumns: \"repeat(3, 150px)\",\n    gridTemplateRows: \"repeat(3, 150px)\"\n  };\n  return (\n    <div style={gridStyle} id=\"drum-machine\">\n      {pads}\n      <Description />\n    </div>\n  );\n};\n\nexport default Machine;","import React from 'react';\nimport './App.css';\nimport Machine from './Machine';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Machine />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}