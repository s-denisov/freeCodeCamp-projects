{"version":3,"sources":["store.ts","CalcButton.tsx","Display.tsx","Container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["operatorToFunction","+","x","y","-","*","/","fromCalcs","arr","parseFloat","join","initialState","first","createStore","state","arguments","length","undefined","action","evalAll","operator","second","toString","split","type","cond","newOperator","Number","isNaN","add","concat","includes","nextDigit","hasOperator","CalcButton","props","react_default","a","createElement","id","areaName","onClick","style","gridArea","value","text","createButton","fn","connect","NumButton","e","target","OpButton","EvalButton","ClearButton","toDisplay","Container","display","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","numbers","Object","toConsumableArray","Array","keys","src_Display","map","key","toWords","App","es","store","src_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAKMA,EAAqB,CACzBC,IAAK,SAACC,EAAWC,GAAZ,OAA0BD,EAAIC,GACnCC,IAAK,SAACF,EAAWC,GAAZ,OAA0BD,EAAIC,GACnCE,IAAK,SAACH,EAAWC,GAAZ,OAA0BD,EAAIC,GACnCG,IAAK,SAACJ,EAAWC,GAAZ,OAA0BD,EAAIC,IAK/BI,EAAY,SAACC,GAAD,OAAsBC,WAAWD,EAAIE,KAAK,MA6CtDC,EAAsB,CAC1BC,MAAO,CAAC,MAgDKC,cA3CC,WAAiD,IAAhDC,EAAgDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxCJ,EAAcO,EAA0BH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzDE,EAAU,kBAEZnB,EAAmBc,EAAMM,UACvBb,EAAUO,EAAMF,OAChBL,EAAUO,EAAMO,SAzDSC,WAAWC,MAAM,KA4DhD,OAAQL,EAAOM,MACb,IApDU,QAqDR,OAAOb,EACT,IA/CiB,eAgDf,IAAMc,EAA8B,MAAvBP,EAAOQ,kBAA0CT,IAAnBH,EAAMM,SACjD,YAAwBH,IAAjBH,EAAMO,QAAwBM,OAAOC,MAAMrB,EAAUO,EAAMO,SAC9D,CACET,MAAOE,EAAMF,MACbQ,SAAUK,EAAOX,EAAMM,SAAWF,EAAOQ,YACzCL,OAAQI,EAAO,CAAC,UAAOR,GAEzB,CACEL,MAAOO,IACPC,SAAUF,EAAOQ,aAEzB,IApCa,WAqCX,YAA0BT,IAAnBH,EAAMM,SAAyBN,EAAQ,CAAEF,MAAOO,KACzD,IAjDc,YAkDZ,IAAMU,EAAM,SAAC3B,GAAD,YACHe,IAANf,GAA4B,MAATA,EAAE,GAAa,GAAKA,GAAG4B,YACnCb,IAANf,GAAmBA,EAAE6B,SAAS,MAA6B,MAArBb,EAAOc,UACzC,GACAd,EAAOc,YAETC,OAAiChB,IAAnBH,EAAMM,SAC1B,MAAO,CACLR,MAAOqB,EAAcnB,EAAMF,MAAQiB,EAAIf,EAAMF,OAC7CQ,SAAUN,EAAMM,SAChBC,OAAQY,EAAcJ,EAAIf,EAAMO,aAAWJ,GAE/C,QACE,OAAOH,KC7FPoB,EAAa,SAACC,GAClB,OACEC,EAAAC,EAAAC,cAAA,SACEC,GAAIJ,EAAMK,SACVhB,KAAK,SACLiB,QAASN,EAAMM,QACfC,MAAO,CAAEC,SAAUR,EAAMK,UACzBI,MAAOT,EAAMU,QAKbC,EAAe,SAACC,GAAD,OACnBC,YACE,KACA,CAAEP,QAASM,GAFbC,CAGEd,IACSe,EAAYH,EDmBD,SAACI,GAAD,MAAqB,CAC3C1B,KAPgB,YAQhBQ,UAAYkB,EAAEC,OAA4BP,SCpB/BQ,EAAWN,EDMG,SAACI,GAAD,MAAqB,CAC9C1B,KAPmB,eAQnBE,YAAcwB,EAAEC,OAA4BP,SCPjCS,EAAaP,EDyBF,iBAAO,CAC7BtB,KAJe,cCrBJ8B,EAAcR,EDNN,iBAAO,CAC1BtB,KAJY,WEVCwB,cACb,SAAC9C,GAAD,OAAcA,GACd,KAFa8C,CARC,SAACb,GACf,IAAMoB,EACJpB,EAAMvB,MAAMF,KAAK,KAChByB,EAAMf,UAAY,UACDH,IAAjBkB,EAAMd,OAAuB,GAAKc,EAAMd,OAAOX,KAAK,KACvD,OAAO0B,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAWgB,aC0BbC,EA9BG,WAChB,IAOMd,EAAQ,CACZe,QAAS,OACTC,kBATqB,0OAUrBC,oBAAqB,mBACrBC,iBAAkB,oBAEdC,EAAOC,OAAAC,EAAA,EAAAD,CAAOE,MAAM,IAAIC,QAC9B,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYG,MAAOA,GACzBN,EAAAC,EAAAC,cAAC4B,EAAD,MACCL,EAAQM,IAAI,SAAAjE,GAAC,OAAKkC,EAAAC,EAAAC,cAACW,EAAD,CAAWmB,IAAKlE,EAAG2C,KAAM3C,EAAEoB,WAAYkB,SAAU6B,kBAAQnE,OAC5EkC,EAAAC,EAAAC,cAACW,EAAD,CAAWJ,KAAK,IAAIL,SAAS,YAC7BJ,EAAAC,EAAAC,cAACc,EAAD,CAAUP,KAAK,IAAIL,SAAS,QAC5BJ,EAAAC,EAAAC,cAACc,EAAD,CAAUP,KAAK,IAAIL,SAAS,aAC5BJ,EAAAC,EAAAC,cAACc,EAAD,CAAUP,KAAK,IAAIL,SAAS,aAC5BJ,EAAAC,EAAAC,cAACc,EAAD,CAAUP,KAAK,IAAIL,SAAS,WAC5BJ,EAAAC,EAAAC,cAACe,EAAD,CAAYR,KAAK,IAAIL,SAAS,WAC9BJ,EAAAC,EAAAC,cAACgB,EAAD,CAAaT,KAAK,KAAKL,SAAS,YChBvB8B,EARO,WACpB,OACElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUC,MAAOA,GACfpC,EAAAC,EAAAC,cAACmC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13723a0f.chunk.js","sourcesContent":["import { createStore } from \"redux\";\n\nexport type ButtonEvent = React.MouseEvent<HTMLInputElement, MouseEvent>;\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\";\nconst operatorToFunction = {\n  \"+\": (x: number, y: number) => x + y,\n  \"-\": (x: number, y: number) => x - y,\n  \"*\": (x: number, y: number) => x * y,\n  \"/\": (x: number, y: number) => x / y\n};\n\ntype CalcDigit = Digit | \"-\";\nconst toCalcs = (n: number) => n.toString().split(\"\") as CalcDigit[];\nconst fromCalcs = (arr: CalcDigit[]) => parseFloat(arr.join(\"\"));\n\nexport type State = {\n  readonly first: CalcDigit[];\n  readonly operator?: Operator;\n  readonly second?: CalcDigit[];\n};\n\nconst CLEAR = \"CLEAR\";\ntype CLEAR = typeof CLEAR;\ntype Clear = { type: CLEAR };\nexport const clear = () => ({\n  type: CLEAR\n});\n\nconst SET_OPERATOR = \"SET_OPERATOR\";\ntype SET_OPERATOR = typeof SET_OPERATOR;\ntype SetOperator = {\n  type: SET_OPERATOR;\n  newOperator: Operator;\n};\nexport const setOperator = (e: ButtonEvent) => ({\n  type: SET_OPERATOR,\n  newOperator: (e.target as HTMLInputElement).value\n});\n\ntype Digit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \".\";\nconst ADD_DIGIT = \"ADD_DIGIT\";\ntype ADD_DIGIT = typeof ADD_DIGIT;\ntype AddDigit = {\n  type: ADD_DIGIT;\n  nextDigit: Digit;\n};\nexport const addDigit = (e: ButtonEvent) => ({\n  type: ADD_DIGIT,\n  nextDigit: (e.target as HTMLInputElement).value\n});\n\nconst EVALUATE = \"EVALUATE\";\ntype EVALUATE = typeof EVALUATE;\ntype Evaluate = { type: Evaluate };\nexport const evaluate = () => ({\n  type: EVALUATE\n});\n\nconst initialState: State = {\n  first: [\"0\"]\n};\n\ntype Action = Clear | SetOperator | AddDigit | Evaluate;\n\nconst reducer = (state = initialState, action: Action): State => {\n  const evalAll = () =>\n    toCalcs(\n      operatorToFunction[state.operator!](\n        fromCalcs(state.first),\n        fromCalcs(state.second!)\n      )\n    );\n  switch (action.type) {\n    case CLEAR:\n      return initialState;\n    case SET_OPERATOR:\n      const cond = action.newOperator === \"-\" && state.operator !== undefined;\n      return state.second === undefined || Number.isNaN(fromCalcs(state.second))\n        ? {\n            first: state.first,\n            operator: cond ? state.operator : action.newOperator,\n            second: cond ? [\"-\"] : undefined\n          }\n        : {\n            first: evalAll(),\n            operator: action.newOperator\n          };\n    case EVALUATE:\n      return state.operator === undefined ? state : { first: evalAll() };\n    case ADD_DIGIT:\n      const add = (x: CalcDigit[] | undefined) =>\n        (x === undefined || x[0] === \"0\" ? [] : x).concat(\n          x !== undefined && x.includes(\".\") && action.nextDigit === \".\"\n            ? []\n            : action.nextDigit\n        );\n      const hasOperator = state.operator !== undefined;\n      return {\n        first: hasOperator ? state.first : add(state.first),\n        operator: state.operator,\n        second: hasOperator ? add(state.second!) : undefined\n      };\n    default:\n      return state;\n  }\n};\n\nexport default createStore(reducer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addDigit, setOperator, ButtonEvent, evaluate, clear } from \"./store\";\n\ntype OnClick = (event: ButtonEvent) => void;\ntype ButtonProps = {\n  text: string;\n  areaName: string;\n  onClick: OnClick;\n};\n\nconst CalcButton = (props: ButtonProps) => {\n  return (\n    <input\n      id={props.areaName}\n      type=\"button\"\n      onClick={props.onClick}\n      style={{ gridArea: props.areaName }}\n      value={props.text}\n    />\n  );\n};\n\nconst createButton = (fn: OnClick) =>\n  connect(\n    null,\n    { onClick: fn }\n  )(CalcButton);\nexport const NumButton = createButton(addDigit);\nexport const OpButton = createButton(setOperator);\nexport const EvalButton = createButton(evaluate);\nexport const ClearButton = createButton(clear);\n","import React from \"react\";\nimport { State } from \"./store\";\nimport { connect } from \"react-redux\";\n\nconst Display = (props: State) => {\n  const toDisplay =\n    props.first.join(\"\") +\n    (props.operator || \"\") +\n    (props.second === undefined ? \"\" : props.second.join(\"\"));\n  return <div id=\"display\">{toDisplay}</div>;\n};\n\nexport default connect(\n  (x: State) => x,\n  null\n)(Display);\n","import React from \"react\";\nimport { NumButton, OpButton, EvalButton, ClearButton } from \"./CalcButton\";\nimport Display from \"./Display\";\nimport { toWords } from \"number-to-words\";\n\nconst Container = () => {\n  const gridTemplateAreas = `\n    \"display display display display\"\n    \"clear   clear   divide  multiply\" \n    \"seven   eight   nine    subtract\"\n    \"four    five    six     add\"\n    \"one     two     three   equals\"\n    \"zero    zero    decimal equals\"`;\n  const style = {\n    display: \"grid\",\n    gridTemplateAreas,\n    gridTemplateColumns: \"repeat(4, 100px)\",\n    gridTemplateRows: \"repeat(6, 100px)\"\n  };\n  const numbers = [...Array(10).keys()];\n  return (\n    <div id=\"container\" style={style}>\n      <Display />\n      {numbers.map(x => (<NumButton key={x} text={x.toString()} areaName={toWords(x)} />))}\n      <NumButton text=\".\" areaName=\"decimal\" />\n      <OpButton text=\"+\" areaName=\"add\" />\n      <OpButton text=\"-\" areaName=\"subtract\" />\n      <OpButton text=\"*\" areaName=\"multiply\" />\n      <OpButton text=\"/\" areaName=\"divide\" />\n      <EvalButton text=\"=\" areaName=\"equals\" />\n      <ClearButton text=\"AC\" areaName=\"clear\" />\n    </div>\n  );\n};\n\nexport default Container;\n","import React from 'react';\nimport './App.css';\nimport Container from './Container';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Container />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}