{"version":3,"sources":["Settings/SettingContainer.tsx","store/State.ts","store/store.ts","store/index.ts","store/Action.ts","Settings/SettingButton.tsx","Settings/SettingDescription.tsx","Output/TimeDisplay.tsx","Operations/StartButton.tsx","Output/TimerLabel.tsx","Operations/ResetButton.tsx","Output/TimerBeep.tsx","GlobalContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SettingContainer","props","className","increaseButton","settingValue","id","description","toLowerCase","decreaseButton","initialState","secondsLeft","started","isBreak","sessionLength","breakLength","switching","reset","store","createStore","state","action","change","p","x","y","f","type","applySwitch","firstTime","window","__REDUX_DEVTOOLS_EXTENSION__","SettingButton","value","onClick","createButton","connect","_","IncSession","DecSession","IncBreak","DecBreak","SettingDescription","count","SessionDescription","BreakDescription","secondPassed","useEffect","interval","setTimeout","clearTimeout","precedeZero","t","toString","length","minutes","Math","floor","startStop","beep","document","getElementById","play","pause","currentTime","src","GlobalContainer","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.706ecc19.chunk.js","sourcesContent":["import React from \"react\";\n\ntype SettingProps = {\n  increaseButton: JSX.Element;\n  decreaseButton: JSX.Element;\n  settingValue: JSX.Element;\n  description: string;\n};\n\nconst SettingContainer: React.FC<SettingProps> = props => {\n  return (\n    <div className=\"setting-container\">\n      {props.increaseButton}\n      {props.settingValue}\n      <p id={props.description.toLowerCase() + \"-label\"}>{props.description}</p>\n      {props.decreaseButton}\n    </div>\n  );\n};\n\nexport default SettingContainer;\n","export type TimeLeft = {\n  secondsLeft: number;\n};\n\nexport type State = {\n  readonly sessionLength: number;\n  readonly breakLength: number;\n  readonly started: boolean;\n  readonly isBreak: boolean;\n  readonly switching: boolean;\n  readonly reset: number; // workaround freeCodeCamp tests, where audio is played, then reset is played from initial position, so no changes are detected\n} & TimeLeft;\n\nexport const initialState: State = {\n  secondsLeft: 1500,\n  started: false,\n  isBreak: false,\n  sessionLength: 25,\n  breakLength: 5,\n  switching: false,\n  reset: 0\n};\n","import { createStore } from \"redux\";\nimport { State, initialState } from \"./State\";\nimport {\n  Action,\n  INCREMENT_SESSION,\n  DECREMENT_SESSION,\n  INCREMENT_BREAK,\n  DECREMENT_BREAK,\n  START_STOP,\n  RESET,\n  SECOND_PASSED\n} from \"./Action\";\n\nconst reducer = (state = initialState, action: Action): State => {\n  const change = (\n    p: \"sessionLength\" | \"breakLength\",\n    x: 0 | 1,\n    y: 0 | 1,\n    f: (a: number, b: number) => number\n  ) =>\n    (state[p] >= 60 && f(1, 1) === 2) || (state[p] <= 1 && f(1, 1) === 0)\n      ? state\n      : {\n          ...state,\n          [p]: f(state[p], 1),\n          secondsLeft: f(state.secondsLeft, 60)\n        };\n  switch (action.type) {\n    case INCREMENT_SESSION:\n      return change(\"sessionLength\", 0, 1, (x, y) => x + y);\n    case DECREMENT_SESSION:\n      return change(\"sessionLength\", 0, 1, (x, y) => x - y);\n    case INCREMENT_BREAK:\n      return change(\"breakLength\", 1, 0, (x, y) => x + y);\n    case DECREMENT_BREAK:\n      return change(\"breakLength\", 1, 0, (x, y) => x - y);\n    case START_STOP:\n      return { ...state, started: !state.started };\n    case SECOND_PASSED:\n      const applySwitch = {\n        ...state,\n        isBreak: !state.isBreak,\n        firstTime: false,\n        secondsLeft: state[state.isBreak ? \"sessionLength\" : \"breakLength\"] * 60\n      };\n      const secondsLeft = state.secondsLeft - (state.started ? 1 : 0);\n      return secondsLeft < 0\n        ? applySwitch\n        : {\n            ...state,\n            switching: secondsLeft === 0,\n            secondsLeft\n          };\n    case RESET:\n      return { ...initialState, reset: state.reset + 1 };\n    default:\n      return state;\n  }\n};\n\nexport default createStore(\n  reducer,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import store from \"./store\";\nexport {\n  incrementSession,\n  decrementSession,\n  decrementBreak,\n  incrementBreak\n} from \"./Action\";\n\nexport default store;\n","export const INCREMENT_SESSION = \"INCREMENT_SESSION\";\nexport const DECREMENT_SESSION = \"DECREMENT_SESSION\";\nexport const INCREMENT_BREAK = \"INCREMENT_BREAK\";\nexport const DECREMENT_BREAK = \"DECREMENT_BREAK\";\nexport const START_STOP = \"START_STOP\";\nexport const SECOND_PASSED = \"SECOND_PASSED\";\nexport const RESET = \"RESET\";\n\nexport type Action = {\n  type:\n    | typeof INCREMENT_SESSION\n    | typeof DECREMENT_SESSION\n    | typeof INCREMENT_BREAK\n    | typeof DECREMENT_BREAK\n    | typeof START_STOP\n    | typeof SECOND_PASSED\n    | typeof RESET;\n};\n\nexport const incrementSession = () => ({ type: INCREMENT_SESSION });\nexport const decrementSession = () => ({ type: DECREMENT_SESSION });\nexport const decrementBreak = () => ({ type: DECREMENT_BREAK });\nexport const incrementBreak = () => ({ type: INCREMENT_BREAK });\nexport const startStop = () => ({ type: START_STOP });\nexport const secondPassed = () => ({ type: SECOND_PASSED });\nexport const reset = () => ({ type: RESET });","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  incrementSession,\n  decrementSession,\n  decrementBreak,\n  incrementBreak\n} from \"../store\";\n\nexport type ButtonProps = {\n  value: string;\n  id: string;\n  action: () => void;\n};\n\nconst SettingButton: React.FC<ButtonProps> = props => {\n  return (\n    <input\n      id={props.id}\n      className=\"setting-button\"\n      type=\"button\"\n      value={props.value}\n      onClick={props.action}\n    />\n  );\n};\n\nconst createButton = (value: string, id: string, action: () => void) =>\n  connect(\n    _ => ({\n      value,\n      id\n    }),\n    { action }\n  )(SettingButton);\n\nexport const IncSession = createButton(\n  \"+\",\n  \"session-increment\",\n  incrementSession\n);\nexport const DecSession = createButton(\n  \"-\",\n  \"session-decrement\",\n  decrementSession\n);\nexport const IncBreak = createButton(\"+\", \"break-increment\", incrementBreak);\nexport const DecBreak = createButton(\"-\", \"break-decrement\", decrementBreak);\n","import React from \"react\";\nimport { State } from \"../store/State\";\nimport { connect } from \"react-redux\";\n\ntype CounterProps = {\n  count: number;\n  id: string;\n};\n\nconst SettingDescription = (props: CounterProps) => {\n  return <div id={props.id}>{props.count}</div>;\n};\n\nexport const SessionDescription = connect(({ sessionLength }: State) => ({\n  id: \"session-length\",\n  count: sessionLength\n}))(SettingDescription);\n\nexport const BreakDescription = connect(({ breakLength }: State) => ({\n  id: \"break-length\",\n  count: breakLength\n}))(SettingDescription);\n","import React, { useEffect } from \"react\";\nimport { TimeLeft, State } from \"../store/State\";\nimport { connect } from \"react-redux\";\nimport { secondPassed } from \"../store/Action\";\n\ntype TimeDisplayProps = {\n  secondPassed: () => void;\n  started: boolean;\n} & TimeLeft;\n\nconst TimeDisplay = (props: TimeDisplayProps) => {\n  useEffect(() => {\n    const interval = setTimeout(props.secondPassed, 1000);\n    return () => clearTimeout(interval);\n  });\n  const precedeZero = (t: number) => (t.toString().length === 1 ? \"0\" : \"\") + t;\n  const minutes = Math.floor(props.secondsLeft / 60);\n  return (\n    <div id=\"time-left\">\n      {precedeZero(minutes) +\n        \":\" +\n        precedeZero(props.secondsLeft - minutes * 60)}\n    </div>\n  );\n};\n\nexport default connect(\n  ({ secondsLeft, started }: State) => ({ secondsLeft, started }),\n  { secondPassed }\n)(TimeDisplay);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { startStop } from \"../store/Action\";\nimport { State } from \"../store/State\";\n\ntype StartProps = {\n  startStop: () => void;\n  started: boolean;\n};\n\nconst StartButton = (props: StartProps) => {\n  return (\n    <input\n      id=\"start_stop\"\n      type=\"button\"\n      onClick={props.startStop}\n      value={props.started ? \"Stop\" : \"Start\"}\n    />\n  );\n};\n\nexport default connect(\n  ({ started }: State) => ({ started }),\n  { startStop }\n)(StartButton);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../store/State\";\n\nconst TimerLabel = (props: { isBreak: boolean }) => (\n  <div id=\"timer-label\">{props.isBreak ? \"Break\" : \"Session\"}</div>\n);\n\nexport default connect(({ isBreak }: State) => ({ isBreak }))(TimerLabel);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { reset } from \"../store/Action\";\n\nconst ResetButton = (props: { reset: () => void }) => {\n  return <input id=\"reset\" type=\"button\" onClick={props.reset} value=\"Reset\" />;\n};\n\nexport default connect(\n  null,\n  { reset }\n)(ResetButton);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../store/State\";\n\nconst TimerBeep = (props: { switching: boolean }) => {\n  useEffect(() => {\n    const beep = document.getElementById(\"beep\") as HTMLAudioElement;\n    if (props.switching) {\n      beep.play();\n    } else {\n      beep.pause();\n      beep.currentTime = 0;\n    }\n  })\n  return (\n    <audio id=\"beep\">\n      <source src=\"../beep.mp3\" type=\"audio/mp3\" />\n    </audio>\n  );\n};\n\nexport default connect(\n  ({ switching, reset }: State) => ({ switching, reset }),\n  null\n)(TimerBeep);\n","import React from \"react\";\nimport SettingContainer from \"./Settings/SettingContainer\";\nimport {\n  IncSession,\n  DecSession,\n  IncBreak,\n  DecBreak\n} from \"./Settings/SettingButton\";\nimport {\n  BreakDescription,\n  SessionDescription\n} from \"./Settings/SettingDescription\";\nimport TimeDisplay from \"./Output/TimeDisplay\";\nimport StartButton from \"./Operations/StartButton\";\nimport TimerLabel from \"./Output/TimerLabel\";\nimport ResetButton from \"./Operations/ResetButton\";\nimport TimerBeep from \"./Output/TimerBeep\";\n\nconst GlobalContainer = () => {\n  return (\n    <div id=\"global-container\">\n      <SettingContainer\n        increaseButton={<IncSession />}\n        decreaseButton={<DecSession />}\n        settingValue={<SessionDescription />}\n        description=\"Session\"\n      />\n      <SettingContainer\n        increaseButton={<IncBreak />}\n        decreaseButton={<DecBreak />}\n        settingValue={<BreakDescription />}\n        description=\"Break\"\n      />\n      <TimeDisplay />\n      <TimerLabel />\n      <StartButton />\n      <ResetButton />\n      <TimerBeep />\n    </div>\n  );\n};\n\nexport default GlobalContainer;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport GlobalContainer from './GlobalContainer';\nimport store from './store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <GlobalContainer />\n    </Provider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}